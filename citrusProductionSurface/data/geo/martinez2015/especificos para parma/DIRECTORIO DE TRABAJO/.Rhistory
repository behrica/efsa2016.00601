cor(datos_n)
p2<-as.matrix(datos)%*% as.matrix(ACP2$loadings)
p2[,1] - mean(p2[,1])
p2[,2] - mean(p2[,2])
p2[,3] - mean(p2[,3])
ACP2$scores[,1]
ACP2$scores[,2]
ACP2$scores[,3]
p2[,3]
p<-as.matrix(datos_n)%*% as.matrix(ACP1$loadings)
p[,1]
#Calculamos los valores para todas las componentes principales
p<-as.matrix(datos_n)%*% as.matrix(ACP1$loadings)
#Comprobamos que da exactamente lo mismo que scores
ACP1$scores[,1]
ACP1$scores[,2]
ACP1$scores[,3]
ACP2$scores[,1]
ACP2$scores[,2]
ACP2$scores[,3]
p2<-as.matrix(datos_n)%*% as.matrix(ACP2$loadings)
p2[,1] - mean(p2[,1])
mean(p2[,1])
p2[,1]
p2[,1]/var(p2[,1])
p2[,1]/sd(p2[,1])
ACP2$scores[,1]
sd1<-sd(x1)
sd1<-sd(x1)
sd2<-sd(x2)
sd3<-sd(x3)
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
ACP2$scores[,1]
sd1<-sum(x1^2)/19
sd1<-sum(x1^2)/19
sd2<-sum(x2^2)/19
sd3<-sum(x3^2)/19
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd2
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
sd1<-sqrt(sum(x1^2)/19)
sd2<-sqrt(sum(x2^2)/19)
sd3<-sqrt(sum(x3^2)/19)
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd2
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
#A cada una de ellas les restamos su media
p2[,1]
p2[,2]
ACP2$scores[,1]
sd1<-sqrt(sum(x1^2)/20)
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
sd1<-sqrt(sum(x1^2)/20)
sd1
sd1
sd1<-sqrt(sum(x1^2)/19)
sd1
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd2
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
#A cada una de ellas les restamos su media
p2[,1]
p2[,2]
p2[,3]
#Comprobamos que da exactamente lo mismo que scores
ACP2$scores[,1]
ACP2$x
ACP2_p<-prcomp(datos)
ACP2_p$x
ACP1$scores
ACP2$loadings
ACP2$scores
cor(datos_n)*ACP2$loadings
cor(datos_n)
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
datos_n2[,1]<-datos_n2[,1]
datos_n2[,2]<-datos_n2[,2]
datos_n2[,2]<-datos_n2[,2]
datos_n2<-datos_n
datos_n2[,2]<-datos_n2[,2]
datos_n2[,1]<-datos_n2[,1]
datos_n2[,2]<-datos_n2[,2]
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
p2[,2]
p2[,3]
ACP2$scores[,1]
#Calculamos los valores para todas las componentes principales
sd1<-sqrt(sum(x1^2)/19)
sd1
sd2<-sqrt(sum(x2^2)/19)
sd3<-sqrt(sum(x3^2)/19)
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd3
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
p2[,2]
p2[,3]
ACP2$scores[,1]
ACP2$scores[,2]
sd1<-sum(x1^2)/19
valores para todas las componentes principales
sd1<-sum(x1^2)/19
sd1
sd2<-sum(x2^2)/19
sd3<-sum(x3^2)/19
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd3
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
p2[,2]
p2[,3]
#Comprobamos que da exactamente lo mismo que scores
ACP2$scores[,1]
datos_n2<-datos_n
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]/sd(p2[,1])
p2[,1]/sum(p2[,1]^2)/19
p2[,1]/sqrt(sum(p2[,1]^2)/19)
sqrt(sum(p2[,1]^2)/19)
sum(p2[,1]^2)/19
as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
ACP2$scores
x1<-rnorm(20, 170, 12)
x2<-rnorm(20, 20000, 500)
x3<-rnorm(20, 0,1)
datos<-data.frame(x1, x2, x3)
ACP1<-princomp(datos)
ACP1$loadings
summary(ACP1)
ACP1$scores
ACP1
#Hallamos las media de cada una de las variables
media1<-mean(x1)
media2<-mean(x2)
media3<-mean(x3)
datos_n<-datos
datos_n[,1]<-datos_n[,1]-media1
datos_n[,2]<-datos_n[,2]-media2
datos_n[,3]<-datos_n[,3]-media3
t(as.matrix(datos_n)) %*% as.matrix(datos_n)/19
cov(datos)
p<-as.matrix(datos_n)%*% as.matrix(ACP1$loadings)
ACP1$scores[,1]
ACP1$scores[,2]
ACP1$scores[,3]
p
p[,1]
p[,2]
p[,3]
ACP1$scores[,3]
ACP2<-princomp(datos, cor=TRUE)
ACP2$loadings
ACP2$scores
summary(ACP2)
datos_n2<-datos_n
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
p2[,2]
p2[,3]
ACP2$scores[,1]
p2[1,1]/0.320859
sum(x1^2)/19
sd1<-sqrt(sum(x1^2)/19)
sd1
x1p<-c(1,3)
prueba<-data.frame(c(1,3,4,5), ncol=2)
prueba
prueba<-data.frame(matrix(c(1,3,4,5), ncol=2))
prueba
prueba[,1]<-prueba[,1]-mean(prueba[,1])
prueba
prueba[,2]<-prueba[,2]-mean(prueba[,2])
prueba
t(prueba)*prueba
cov(prueba)
t(prueba)*prueba/2
prueba*prueba/2
cov(prueba)
prueba*prueba
t(prueba)*prueba
t(prueba)%*%prueba
prueba<-as.matrix(prueba)
t(prueba)%*%prueba
cov(prueba)
sd1<-sqrt(sum(datos_n$x1^2)/19)
sd2<-sum(datos_n$x2^2)/19
sd3<-sum(datos_n$x3^2)/19
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd3
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2
p2[,1]
ACP2$scores[,1]
das las componentes principales
sd1<-sqrt(sum(datos_n$x1^2)/19)
sd1
sd2<-sqrt(sum(datos_n$x2^2)/19)
sd3<-sqrt(sum(datos_n$x3^2)/19)
datos_n2<-datos_n
datos_n2[,1]<-datos_n2[,1]/sd1
datos_n2[,2]<-datos_n2[,2]/sd2
datos_n2[,2]<-datos_n2[,2]/sd3
p2<-as.matrix(datos_n2)%*% as.matrix(ACP2$loadings)
p2[,1]
p2[,2]
p2[,3]
ACP2$scores
#Comprobamos que da exactamente lo mismo que scores
ACP2$scores[,1]
p2[,1]
datos_n2
datos_n2$x1
sd(datos_n2$x1)
mean(datos_n2$x1)
hist(datos_n2$x1)
t(as.matrix(datos_n)) %*% as.matrix(datos_n)/19
cov(datos)
cov(datos_n)
p2[,1]
ACP2$scores[,1]
par(mfrow = c(1, 2))
x <- seq(-1, 1, by = 0.1)
y <- seq(-2, 2, by = 0.2)
grid <- mesh(x, y)
z    <- with(grid, cos(x) * sin(y))
image2D(z, x = x, y = y)
points(grid)
scatter2D(grid$x, grid$y, colvar = z, pch = 20, cex = 2)
x <- matrix(rnorm(600),60,10)
prc <- prcomp(x, center=TRUE, scale=TRUE)
varimax7 <- varimax(prc$rotation[,1:7])
newData <- scale(x) %*% varimax7$loadings
newData
366+50+276
566+276+100
sample(c(1,7), replace=TRUE)
sample(1, c(1,7), replace=TRUE)
?sample
sample(1:7,1, replace=TRUE)
sample(1:7,1, replace=TRUE)
sample(1:7,5, replace=TRUE)
sample(1:7,5, replace=FALSE)
sample(1:7,7, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
sample(1:7,1, replace=FALSE)
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
detach("package:INLA", unload=TRUE)
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
inla.upgrade(testing=TRUE)
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
remove.packages("INLA")
refresh
refresh()
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
remove("INLA")
remove.packages("INLA")
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
install.packages("INLA", repos = "http://www.math.ntnu.no/inla/R/stable")
install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")
library(INLA)
source("http://www.math.ntnu.no/inla/givemeINLA-testing.R")
library(pkgs)
?library
sapply(pkgs, library)
pkgs <- c("sp", "spdep", "maptools", "rgdal", "gstat")
pkgs <- c(pkgs, "deldir", "gstat", "mgcv", "RColorBrewer", "DCluster")
pkgs <- c(pkgs, "MASS", "lattice", "ipred", "fields")
pkgs <- c(pkgs, "R2BayesX", "rgl", "splancs", "spatialkernel", "xts", "spgrass6")
pkgs <- c(pkgs, "classInt", "ggmap", "spatialprobit", "tripack", "boot")
pkgs <- c(pkgs, "RColorBrewer")
library(pkgs)
sapply(pkgs, library)
pkgs
lapply(pkgs, library)
lapply(pkgs, require, character.only=T)
library(ggmap)
library(rgeos)
library(rgdal)
library(raster)
setwd("I:/IVIA/CBS/CBS_SDM/RASTERS/SCRIPS_R/DEFINITIVOS/EJPP/ESPECIFICOS PARA PARMA/DIRECTORIO DE TRABAJO")
################################
######## DATOS #################
################################
datos_n<-read.table("I:/IVIA/CBS/CBS_SDM/RASTERS/ANÁLISIS_ESTADÍSTICO/ANALISIS_INLA/ANALISIS_1945_1950_2014/wager2014_nuevos/BANCOS DE DATOS/datos2014.txt", sep="")
#################################
########## Cargamos boundaries ##
#################################
boundZA<-getData('GADM',country="ZAF",level=0)
boundZA1<-getData('GADM',country="ZAF",level=1)
boundZA2<-getData('GADM',country="ZAF",level=2)
boundZA<-spTransform(boundZA,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
boundZA1<-spTransform(boundZA1,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
boundZA2<-spTransform(boundZA2,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
#We expand the map. In this way, the island won't be showed
CP<-as(extent(15,35,-35,-20),"SpatialPolygons")
proj4string(CP)<-CRS(proj4string(boundZA1))
## Clip the map
sudafrica0<-gIntersection(boundZA, CP, byid=TRUE)
sudafrica1<-gIntersection(boundZA1,CP,byid=TRUE)
###########################################################
#################### GENERAMOS MAPAS CON LOW PREVALENCE ###
###########################################################
library(ggmap)
library(rgeos)
library(rgdal)
library(raster)
setwd("I:/IVIA/CBS/CBS_SDM/RASTERS/SCRIPS_R/DEFINITIVOS/EJPP/ESPECIFICOS PARA PARMA/DIRECTORIO DE TRABAJO")
################################
######## DATOS #################
################################
datos_n<-read.table("I:/IVIA/CBS/CBS_SDM/RASTERS/ANÁLISIS_ESTADÍSTICO/ANALISIS_INLA/ANALISIS_1945_1950_2014/wager2014_nuevos/BANCOS DE DATOS/datos2014.txt", sep="")
#################################
########## Cargamos boundaries ##
#################################
boundZA<-getData('GADM',country="ZAF",level=0)
boundZA1<-getData('GADM',country="ZAF",level=1)
boundZA2<-getData('GADM',country="ZAF",level=2)
boundZA<-spTransform(boundZA,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
boundZA1<-spTransform(boundZA1,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
boundZA2<-spTransform(boundZA2,CRS=CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs")) #assign CRS/projection
#We expand the map. In this way, the island won't be showed
CP<-as(extent(15,35,-35,-20),"SpatialPolygons")
proj4string(CP)<-CRS(proj4string(boundZA1))
## Clip the map
sudafrica0<-gIntersection(boundZA, CP, byid=TRUE)
sudafrica1<-gIntersection(boundZA1,CP,byid=TRUE)
########################################
######### Descargamos del google maps ##
########################################
#Seleccionamos la zona a extraer (SUDÁFRICA)
bbox2 <- ggmap::make_bbox(c(30,50), c(-30, -10), f = 0.05)
map_loc2 <- get_map(location = bbox2, source = 'google', maptype = 'satellite', zoom=5)
map2 <- ggmap(map_loc2, extent = 'device', maprange=FALSE, darken = c(0, "white"))
#mapa
map2
bbox2 <- ggmap::make_bbox(c(15,35), c(-35, -20), f = 0.05)
map_loc2 <- get_map(location = bbox2, source = 'google', maptype = 'satellite', zoom=5)
map2 <- ggmap(map_loc2, extent = 'device', maprange=FALSE, darken = c(0, "white"))
#mapa
map2
suda_ggmap <- fortify(sudafrica0)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = 'white', alpha = 0.5, size = 0.5) +
geom_point(aes(x = lon, y = lat), data=datos1950_kn, alpha = 1,size=5, col=colores[as.factor(datos1950_kn$cbs)]) +
++++
")"
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = 'white', alpha = 0.5, size = 0.5)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = 'white', alpha = 0, size = 0.5)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = NULL, alpha = 1, size = 0.5)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "white", alpha = 1, size = 0.5)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "white", alpha = 0.2, size = 1)
ggmap(map_loc2) +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "white", alpha = 0.2, size = 1)
ggmap(map_loc2) +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "white", alpha = 0, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "white", alpha = 0.5, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "black", alpha = 0.5, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "black", alpha = 0.1, size = 1)
sudafrica1_data<-fortify(sudafrica1)
map + geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica1_data,
colour = 'white', fill = 'black', alpha = .2, size = .3)
bbox <- ggmap::make_bbox(c(0,50), c(-50, 50), f = 0.05)
map_loc <- get_map(location = bbox, source = 'google', maptype = 'satellite', zoom=3)
map <- ggmap(map_loc, extent = 'device', maprange=FALSE, darken = c(0, "white"))
#mapa
map + geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica1_data,
colour = 'white', fill = 'black', alpha = .2, size = .3)
bbox2 <- ggmap::make_bbox(c(0,50), c(-50, -10), f = 0.05)
map_loc2 <- get_map(location = bbox2, source = 'google', maptype = 'satellite', zoom=5)
map2 <- ggmap(map_loc2, extent = 'device', maprange=FALSE, darken = c(0, "white"))
#mapa
map2
map2 + geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica1_data,
colour = 'white', fill = 'black', alpha = .2, size = .3)
sudafrica0_data<-fortify(sudafrica0)
ggmap(map_loc3, extent="device")
ggplot(datos2014, aes(x=lon, y=lat)) + geom_point() + ggmap(map_loc3, extent="normal")
pdf("sudafrica2.pdf", paper="special")
map + geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica0_data,
colour = 'white', fill = 'black', alpha = .2, size = .3)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "black", alpha = 0.1, size = 1)
map2 +
geom_lines(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "black", alpha = 0.1, size = 1)
map2 +
geom_line(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill = "black", alpha = 0.1, size = 1)
map2 +
geom_line(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white',  alpha = 0.1, size = 1)
map2 +
geom_line(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white',  alpha = 0, size = 1)
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white',  alpha = 0.1, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white',  alpha = 0.1, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill="white",
alpha = 0.1, size = 1)
ggmap(map_loc2, extent="device", legend="bottomleft" )+
scale_x_continuous( limits = c( 15 , 34 ) , expand = c( 0 , 0) )+ #rango
scale_y_continuous( limits = c( -37 , -19 ) , expand = c( 0 , 0) )+#rango
geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica1_data,  colour = 'white', fill = 'white', alpha = .3, size = .1) +
geom_point(aes(x = lon, y = lat), data=datos2014, alpha = 1,size=2, col=colores[datos2014$cbs]) +
ggtitle('2014') +  theme(plot.title=element_text( size=50))
ggmap(map_loc2, extent="device", legend="bottomleft" )+
scale_x_continuous( limits = c( 15 , 34 ) , expand = c( 0 , 0) )+ #rango
scale_y_continuous( limits = c( -37 , -19 ) , expand = c( 0 , 0) )+#rango
geom_polygon(aes(x = long, y = lat, group = group), data = sudafrica1_data,  colour = 'white', fill = 'white', alpha = .3, size = .1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 0.1, size = 1)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1)
colores<-c("green", "red", "orange")
datos_n
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[datos_n$cbs_low]) +
datos_n$cbs
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[datos_n$cbs_low])
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[as.factor(datos_n$cbs_low)])
png("cbs_low.png", width=1000, height=1000)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[as.factor(datos_n$cbs_low)])
dev.off()
png("cbs_low.png", width=2000, height=2000)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[as.factor(datos_n$cbs_low)])
dev.off()
png("cbs_low.png", width=1500, height=1500)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=2, col=colores[as.factor(datos_n$cbs_low)])+
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1)
dev.off()
colores<-c("green4", "red", "orange")
png("cbs_low.png", width=1500, height=1500)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=3, col=colores[as.factor(datos_n$cbs_low)])+
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1)
dev.off()
png("cbs_low.png", width=1500, height=1500)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill="black",
alpha =0.2, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=3, col=colores[as.factor(datos_n$cbs_low)])+
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1)
dev.off()
png("cbs_low.png", width=1500, height=1500)
map2 +
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill="black",
alpha =0.1, size = 1) +
geom_point(aes(x = lon, y = lat), data=datos_n, alpha = 1,size=3, col=colores[as.factor(datos_n$cbs_low)])+
geom_polygon(aes(x = long, y = lat, group = group), data = suda_ggmap,  colour = 'white', fill=NA,
alpha = 1, size = 1)
dev.off()
